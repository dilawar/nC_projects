//  ******************************************************
// 
//     File generated by: neuroConstruct v1.7.1
// 
//  ******************************************************

{load_file("nrngui.hoc")}

//  Initialising stopwatch for timing setup

{startsw()}

print ""
print "*****************************************************"
print ""
print "    neuroConstruct generated NEURON simulation "
print "    for project: /home1/dilawars/nC_projects/Ex3_Morphology_copy/Ex3_Morphology_copy.ncx "
print ""
print "    Description: This example demonstrates importation of a number of cell morphology files in different formats, including the Purkinje Cell Model of Erik De Schutter and Jim Bower."
print "    "
print "    To include the cells in the project go to the tab Cell Types, click Add New Cell Type to Project. Click on GenesisMorphReader (or any of the others...) and browse to the directory: examples/Ex3-Morphology/importedMorphologies. Here you will find examples of morphologies you can import into the project. After these are loaded you can click: View/edit morphology to see it in 3D. "
print "      "
print "    A pyramidal cell neuron as included with the standard NEURON distribution is also included. The importation of this shows how the validation checks can help highlight potential problems when using a morphology from one simulator on another platform. Try viewing the cell with Original Compartmentalisation selected to see sections, segments, and connections more clearly."
print "    "
print "    There are also examples included of a Neurolucida format file, a MorphML file and an SWC format morphology."
print "    "
print "    For more details on importing each format see the documentation under menu item Help -> Help -> Importing morphology files. "
print "     "
print ""
print "    Simulation Configuration: SimConfig: Default Simulation Configuration "
print "    This is the default configuration of the Cell Groups, stimulations, plots, etc for this project "
print " "
print  "*****************************************************"

strdef pwd
{system("pwd", pwd)}
print ""
print "Current working dir: ", pwd

objectvar allCells
{allCells = new List()}


//  A flag to signal simulation was generated by neuroConstruct 

{nC = 1}


//  Including neuroConstruct utilities file 

{load_file("nCtools.hoc")}

//  Including neuroConstruct cell check file 

{load_file("cellCheck.hoc")}

//  Getting hostname

objref strFuncs
{strFuncs = new StringFunctions()}
strdef host
{system("hostname", host)}
if (strFuncs.len(host)>0) {
    strFuncs.left(host, strFuncs.len(host)-1) 
} else {
    host = "????" 
}


//  Simulation running in serial mode, setting default host id

{hostid = 0}


//  Initializes random-number generator

{use_mcell_ran4(1)}

{mcell_ran4_init(1029083970)}


func isCellOnNode() {
    return 1 // serial mode, so yes...
}

//////////////////////////////////////////////////////////////////////
//   Setting up Python to allow loading in of NetworkML 
//////////////////////////////////////////////////////////////////////

nrnpython("import sys")
nrnpython("import os")


//  Adding current path to Python path

nrnpython("if sys.path.count(os.getcwd())==0: sys.path.append(os.getcwd())")
nrnpython("import neuron")
nrnpython("from neuron import hoc")
nrnpython("import nrn")

objref py
py = new PythonObject()

nrnpython("h = hoc.HocObject()")


//  Importing main Python file: Ex3_Morphology_copy

nrnpython("import Ex3_Morphology_copy")

nrnpython("Ex3_Morphology_copy.loadNetwork()")



//////////////////////////////////////////////////////////////////////
//   Setting initial parameters
//////////////////////////////////////////////////////////////////////

strdef simConfig
{simConfig = "Default Simulation Configuration"}
{celsius = 6.3}



proc initialiseValues0() {


//  Setting initial vals in cell group: CellGroup_1 which has 1 cells


//  Giving all cells an initial potential of: -60.0

    for i = 0, n_CellGroup_1-1 {
        forsec a_CellGroup_1[i].all  v = -60.0

    }

}

objref fih0
{fih0 = new FInitializeHandler(0, "initialiseValues0()")}



//////////////////////////////////////////////////////////////////////
//   Adding 1 stimulation(s)
//////////////////////////////////////////////////////////////////////

{ n_stim_Input_0 = 1 }
objectvar stim_Input_0[n_stim_Input_0]


//  Note: the stimulation was specified as being at a point 0.5 along segment: Comp_1

//  in section: Soma. For NEURON, this translates to a point 0.33331072 along section: Soma

a_CellGroup_1[0].Soma {
    stim_Input_0[0] = new CurrentClampExt(0.33331072)
    stim_Input_0[0].del = 20.0
    stim_Input_0[0].dur = 60.0
    stim_Input_0[0].amp = 1.0
    stim_Input_0[0].repeat = 0
}


access l22[0].Soma

//////////////////////////////////////////////////////////////////////
//   Settings for running the demo
//////////////////////////////////////////////////////////////////////


tstop = 100.0
dt = 0.02
steps_per_ms = 50.0

//////////////////////////////////////////////////////////////////////
//   Adding 1 plot(s)
//////////////////////////////////////////////////////////////////////


//   This code pops up a plot of a_CellGroup_1[0].Soma.v(0.33331072)

objref CellGroup_1_v
CellGroup_1_v = new Graph(0)
{CellGroup_1_v.size(0, tstop,-90.0,50.0)}
{CellGroup_1_v.view(0, -90.0, tstop, 140.0, 80, 330, 330, 250)}
{
    CellGroup_1_v.addexpr("a_CellGroup_1[0].Soma.v", "a_CellGroup_1[0].Soma.v(0.33331072)", 1, 1, 0.8, 0.9, 2)
    graphList[0].append(CellGroup_1_v)
}

//////////////////////////////////////////////////////////////////////
//   This will run a full simulation of 5001 steps when the hoc file is executed
//////////////////////////////////////////////////////////////////////


//  Recording 1 variable(s)

objref v_time
objref f_time
objref propsFile

v_time = new Vector()
{ v_time.record(&t) }
{ v_time.resize(5001) } // false
f_time = new File()


//  Saving VOLTAGE on only one seg, id: 0, in the only cell in CellGroup_1


//  Creating vector for segment: Comp_1(ID: 0)

objref v_CellGroup_1_seg_Comp_1_v[1]
for i=0, 0 {
    { v_CellGroup_1_seg_Comp_1_v[i] = new Vector() }
    { v_CellGroup_1_seg_Comp_1_v[i].record(&a_CellGroup_1[i].Soma.v(0.33331072))} 
    { v_CellGroup_1_seg_Comp_1_v[i].resize(5001) }
}
objref f_CellGroup_1_seg_Comp_1_v[1]

strdef simReference
simReference = "Sim_5"



strdef simsDir
simsDir = "/home1/dilawars/nC_projects/Ex3_Morphology_copy/simulations/"


//  Note: to change location of the generated simulation files, just change value of targetDir
//  e.g. targetDir="" or targetDir="aSubDir/"

strdef targetDir
{ sprint(targetDir, "%s%s/", simsDir, simReference)}


//  Single simulation run...

strdef date
// Note: not showing date/time of start/stop of simulation. This requires Cygwin to be installed// which includes the "date" unix command. Install under c:\cygwin

setuptime = stopsw()

print "Setup time for simulation: ",setuptime," seconds"

print "Starting simulation of duration ",tstop,"ms,  variable time step, reference: ",simReference,""

{currenttime = startsw()}
//////////////////////////////////////////////////////////////////////
//   Main run statement
//////////////////////////////////////////////////////////////////////


//  Setting basic variable time step active

{cvode.active(1)}
{cvode.atol(0.001)}
{run()}

{realruntime = startsw() - currenttime}
print "Finished simulation in ", realruntime ,"seconds"

print "Storing the data..."

strdef timeFilename

//  Saving VOLTAGE on only one seg, id: 0, in the only cell in CellGroup_1


//  Saving vector for segment: Comp_1(ID: 0)

for i=0, 0 {
    f_CellGroup_1_seg_Comp_1_v[i] = new File()
    strdef filename
    {sprint(filename, "%sCellGroup_1_%d.dat", targetDir, i)}
    f_CellGroup_1_seg_Comp_1_v[i].wopen(filename)
    v_CellGroup_1_seg_Comp_1_v[i].printf(f_CellGroup_1_seg_Comp_1_v[i])
    f_CellGroup_1_seg_Comp_1_v[i].close()
}


{ sprint(timeFilename, "%s%s", targetDir, "time.dat")}
{ f_time.wopen(timeFilename) }
{ v_time.printf(f_time) }
{ f_time.close() }

{savetime = stopsw()}

propsFile = new File()
strdef propsFilename
{sprint(propsFilename, "%ssimulator.props", targetDir)}
{propsFile.wopen(propsFilename)}
{propsFile.printf("#This is a list of properties generated by NEURON during the simulation run\n")}
{propsFile.printf("Host=%s\n", host)}
{propsFile.printf("RealSimulationTime=%g\n", realruntime)}
{propsFile.printf("SimulationSaveTime=%g\n", savetime)}
{propsFile.printf("SimulationSetupTime=%g\n", setuptime)}
{propsFile.printf("NEURONversion=%s\n", nrnversion())}
{propsFile.close()}

print "Data stored in ",savetime, "secs in directory: ", targetDir


//   This code pops up a simple Run Control

{
xpanel("RunControl", 0)
v_init = -60.0
xbutton("Init & Run","run()")
xbutton("Stop","stoprun=1")
t = 0
xvalue("t","t", 2 )
tstop = 100.0
xvalue("Tstop","tstop", 1,"tstop_changed()", 0, 1 )
dt = 0.02
 xvalue("dt","dt", 1,"setdt()", 0, 1 )
xpanel(80,80)
}

